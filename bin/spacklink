#!/bin/sh

#------------------------------------------------------------
# spacklink:
#
#  a script to set up links in etc/spack in a specified 
#  <spack directory> to configuration files for a <site> 
#  and a <machine>
#------------------------------------------------------------

#------------------------------------------------------------
# Usage message
#------------------------------------------------------------

usage()
{
  cat <<EOF 1>&2

Usage:
  spacklink [-n] <spack directory> <site> <machine name>
EOF
  exit 1
}

#------------------------------------------------------------
# Parse arguments
#------------------------------------------------------------

# Dry run flag
if [ "$1" == "-n" ]; then
  echo=echo
  shift
else
  echo=
fi

# $1 spack directory
if [ "$1" == "" ]; then
  usage
else
  spack_root=$1
fi

# $2 site 
if [ "$2" == "" ]; then
  usage
else
  site=$2
fi

# $3 machine 
if [ "$3" == "" ]; then
  usage
else
  machine=$3
fi

#------------------------------------------------------------
# Check paths
#------------------------------------------------------------

# Check for valid spack root
spack_etc=${spack_root}/etc/spack
if test ! -d ${spack_etc}; then
  echo "spacklink: Invalid spack directory ${spack_root}"
  usage
fi

spack_config_root_relative=$(dirname $0)/..
spack_config_root=$(realpath ${spack_config_root_relative})

# Check for valid site
if test ! -d ${spack_config_root}/${site}; then
  echo "spacklink: Invalid site directory ${spack_config_root}/${site}"
  usage
fi

# Check for valid machine
if test ! -d ${spack_config_root}/${site}/${machine}; then
  echo "spacklink: Invalid machine directory ${spack_config_root}/${site}/${machine}"
  usage
fi

#------------------------------------------------------------
# Helper functions
#------------------------------------------------------------

link_site()
{
  kind=$1
  target=${spack_config_root}/${site}/${site}.${kind}.yaml
  if ! test -f ${target}; then
    echo "No site-wide ${kind} file ${target}; skipping"
  else
    $echo ln -s ${target} ${spack_etc}/${kind}.yaml
  fi
}

cwd=$(realpath ${spack_root}/..)
spack_machcfg_root=${cwd}/cfg/${machine}.system
link_machine()
{
  kind=$1
  target=${spack_config_root}/${site}/${machine}/${machine}.${kind}.yaml
  if ! test -f ${target}; then
    echo "No machine-specific ${kind} file ${target}; skipping"
  else
    if test ! -d ${spack_machcfg_root}; then
      echo "Creating Spack machine-specific config directory at ${spack_machcfg_root}"
      $echo mkdir -p ${spack_machcfg_root}
    fi
    $echo rm ${spack_machcfg_root}/${kind}.yaml
    $echo ln -s ${target} ${spack_machcfg_root}/${kind}.yaml
  fi
}

spack_env_root=${cwd}/envs
spack_env_link=${spack_root}/var/spack/environments
link_env()
{
  targets=${spack_config_root}/${site}/${machine}/${machine}.spack.*.yaml
  if test -z "${targets}"; then
    echo "No Spack environment files; skipping"
  else
    if test ! -d ${spack_env_root}; then
      echo "Creating Spack environments directory at ${spack_env_root}"
    fi
    if ! test -h ${spack_env_link}; then
      echo "Removing current Spack environments directory"
      $echo rm -rf ${spack_env_link}
      $echo ln -s ${spack_env_root} ${spack_env_link}
    fi
    for f in $targets; do
      name=$(basename $f | sed -e "s/${machine}\.spack\.//; s/\.yaml//")
      envdir=${spack_env_root}/${name}-${machine}
      if test ! -d ${envdir}; then
	$echo mkdir -p ${envdir}
      fi
      echo "Linking Spack environment ${envdir}/spack.yaml -> $f"
      $echo rm -f ${envdir}/spack.yaml
      $echo ln -s $f ${envdir}/spack.yaml
    done
  fi
}

#------------------------------------------------------------
# The script
#------------------------------------------------------------

echo "Removing current spack configuration settings"
$echo /bin/rm -rf ${spack_etc}/*.yaml

echo "Configuring $spack_root with spack configuration files for site=$site machine=$machine"

link_site config
link_site modules
link_site packages
link_machine config
link_machine modules
link_machine packages
link_machine compilers
link_env

echo "Copying template script for sourcing Spack"
$echo cp ${spack_config_root}/bin/srcspack.template ${cwd}/srcspack

echo "Done! Please source the 'srcspack' script to continue..."
