#  This is the packages.yaml file customized for an installation on a toss3 system (rzhasgpu)
#
#  packages.yaml
#
#  This file specifies the versions and variants for HPCToolkit's
#  dependency packages and serves as a common reference point for how
#  to build them.  It also specifies the paths or modules for system
#  build tools (cmake, python, etc) to avoid rebuilding them.
#
#  Put this file in one of spack's configuration scope directories,
#  normally either <spack-root>/etc/spack, or else in its own,
#  separate directory (and then use 'spack -C dir').
#
#  There are two main sections: hpctoolkit dependency specs and system
#  build tools: cmake, perl, python, MPI and GCC.
#
#  See also:
#    https://spack.readthedocs.io/en/latest/basic_usage.html#specs-dependencies
#    https://spack.readthedocs.io/en/latest/build_settings.html
#
packages:

  #------------------------------------------------------------
  # 2 -- System Build Tools
  #------------------------------------------------------------

  # We require cmake >= 3.0, perl >= 5.x and python 2.7.x or 3.x.
  # There are three ways to satisfy these requirements: a system
  # installed version (eg, /usr), a module or build from scratch.
  #
  # By default, spack will rebuild these, even if your version is
  # perfectly fine.  If you already have an installed version and
  # prefer to use that instead, then uncomment some entry below and
  # edit to fit your system.
  #
  # Note: these three are all build tools.  They are needed to build
  # hpctoolkit, but we don't need them at run time or link with any
  # libraries.  (Not counting hpcsummary which is a python script.)
  #
  #------------------------------------------------------------


  # cmake -- dyninst requires cmake >= 3.x.

  # Example for a system install.  This example says that cmake 3.11.0
  # is available at /usr/bin/cmake.  Note: the 'paths:' entry is the
  # parent directory of 'bin', not the bin directory itself (similar
  # to prefix).
  # cmake:
  #   paths:
  #     cmake@3.11.0:  /usr
  #   buildable: False

  # Example for a module.  This example says that cmake 3.7.2 is
  # available from module 'CMake/3.7.2'.
  cmake:
    modules:
      cmake@3.14.5:   cmake/3.14.5 
    buildable: False

  # Example spec to build cmake from scratch.
  # +ownlibs, ~qt and ~openssl are to reduce prerequisites.
  # cmake:
  #   version:  [3.12.4]
  #   variants: +ownlibs ~qt ~openssl

  #------------------------------------------------------------

  # perl -- autotools requires perl >= 5.x which most systems have.

  # Example for system perl.
  perl:
    paths:
      perl@5.16.3:  /usr
    buildable: False

  # Example spec to build perl.
  # perl:
  #   version:  [5.26.2]

  #------------------------------------------------------------

  # python -- spack always requires python >= 2.6 to do anything.
  # On x86, intel-xed requires python 2.7.x or >= 3.4.

  # Example for system python.
  # python:
  #   paths:
  #     python@2.7.5:  /usr
  #   buildable: False

  # Example for python module.
  python:
    paths:
      python@2.7.16:  /usr/tce
    buildable: False

  # Example spec to build python.
  # ~dbm, ~tk are to reduce prerequisites.
  # python:
  #   version:  [2.7.15, 3.6.5]
  #   variants: ~dbm ~tk

  #------------------------------------------------------------

  # MPI -- hpctoolkit always supports profiling MPI applications.
  # Adding MPI here is only for building hpcprof-mpi, the MPI version
  # of hpcprof.
  #
  # Normally, you want MPI from a module (mpich, mvapich, openmpi)
  # that was built for the correct interconnect system for the compute
  # nodes.  Also, for hpcprof-mpi, MPI should be built with GNU
  # gcc/g++ and the same version used to build hpctoolkit (to keep the
  # C++ libraries in sync).
  #
  openmpi:
    modules:
      openmpi@3.1.0:  spectrum-mpi/rolling-release 
    buildable: False

  #------------------------------------------------------------

  # GCC -- hpctoolkit requires building with GNU gcc/g++.  We require
  # version 4.8 at a minimum and preferably 5.x or later.
  #
  # Spack handles compilers specially with the compilers.yaml file.
  # This example is only for building a more recent compiler.
  #
  # Note: spack will select the first version that is compatible with
  # the rest of the spec and command line.  So, put the version you
  # want to build first.  4.8.4 is really only for Blue Gene.

  # gcc:
  #   version:  [7.3.0, 6.4.0, 5.5.0, 4.8.4]

