----------------------------------------------------------------------
To do a spack install and test for a machine <machine> at site <site>:
----------------------------------------------------------------------
1.  Set up a top-level "~/gits/" directory on <machine>, and do all the git clones into it.
	You can really put them wherever you want, but the remainder of these
	instructions assume everything goes into ~/gits/

2.  Set up the repositories:
	cd ~/gits
	git clone https://github.com/jmellorcrummey/spack-configs
	    That's where this file lives, so you must have already done that!
        git clone https://github.com/spack/spack
	    First remove ~/gits/spack and ~/.spack to set up for a clean install

	FYI:
	    The hpctoolkit sources may not be needed, but can be gotten by:
		git clone https://github.com/hpctoolkit/hpctoolkit
		    See build.txt for more information
	    The hpctest sources may not be needed, but can be gotten by
		git clone https://github.com/scottkwarren/hpctest
		    See text.txt for more information

3. Set up your shell to use spack and the spacklink setup command:
	for bash:
          vi ~/.bashrc	#Add the following:
            umask 022  or to make everything group-writable
            export SPACK_ROOT=~/gits/spack
            export PATH=${SPACK_ROOT}/bin:~gits/spack-configs/bin:${PATH}
            source ${SPACK_ROOT}/share/spack/setup-env.sh
	    export <PROXIES, as needed for spack usage>
	  source ~/.bashrc

4.  Tell spack to use the right gcc:
    First:
	which gcc; gcc --version
    Then:
	module avail gcc
    If a module version is later than the one on your path,
	module load gcc.xxx -- to put that later version on your path

    Run "spack compiler find" to tell spack about those compilers.

    If compiler version is 5.x or later, it's good enough to install hpctoolkit,
	and you are done with this step.
    If it is not:
	Run "spack install gcc@7.3.x"  (or some other version 5.x or later)
	"module load <the gcc you've just installed>"
	Run "spack compiler find" again to tell spack about it
	Run "spack install gcc@7.3.x" again, to have it built with itself,
	    so all future installs will be in the same directory (the compiler
	    version is part of the full path name)..

5.  Go to the spack-configs repo, and prepare the appropriate:
	<site>/<machine>/<machine>.config.yaml
	<site>/<machine>/<machine>.modules.yaml
	<site>/<machine>/<machine>.packages.yaml
		files

	The <machine>.config.yaml file should say where to install its packages and modules
	    It seems best to set a top-level directory, <INSTALL> and put the packages in
		  config:
		    install_tree: <INSTALL>/packages
	        and the modules in
		  module_roots:
		    lmod: <INSTALL>/modules/lmod
			etc.
	    The directories and subdirectories used should be created before the install
	    Start with the config.yaml in spack/spack/etc/default or the one for
		in spack-configs for any existing similar <machine>.

	The <machine>.modules.yaml file describes the modules to be built.
	    There are three types of modules, lmod, tcl, and dotkit: the module files in
		the various subdirectories build all three.
		dotkit is now obsolete.
	    The modules built in this step have long, human-hostile names; more
		user-friendly modules are constructed below.

	The <machine>.packages.yaml file describes the dependencies for the install.
	    Start with the one for any existing similar <machine>.
	    You will edit it in step 7, below.
	    Alternatively, you can start with the version in ~/gits/hpctoolkit/spack/packages.yaml

	If you do not have a <machine>.packages.yaml file, the spack installation
	will build all necessary prerequisites.

6.  Set up the spack install environment:
	-------------------------------------------------------------------
	It's not clear what spack caches, so to be on the safe side, I remove
	    and re-clone the spack directory, whenever I use a spack that was
	    previously used on a different machine.  I also remove the output
	    packages and modules directories, set in the <machine>.config.yaml.
	-------------------------------------------------------------------
	cd ~/gits
	/bin/rm -rf $SPACK_ROOT
        git clone https://github.com/spack/spack.git
	source ~/.bashrc

	Tell spack how to do the install, using the files you prepared in step 6 above
	Run "spacklink <$SPACK_ROOT> <site> <machine>"
		The spacklink script is in the bin directory in the spack-configs repository

	It does the following
		cd $SPACK_ROOT/etc/spack
		rm *.yaml
		ln -s .../spack-configs/<site>/<machine>/<machine>.config.yaml config.yaml
		ln -s .../spack-configs/<site>/<machine>/<machine>.modules.yaml modules.yaml
		ln -s .../spack-configs/<site>/<machine>/<machine>.packages.yaml packages.yaml
	note that if any of those files are not present, no link will be made, and the spack
	    default will be used.

	Verify that the machine you are on matches <machine> in the directory and
		the file names of the symlinks.

	Alternatively, you can copy or link those files from wherever you choose..

7.  If you have a packages.yaml file, you should configure the packages.yaml file,
    editing it via its symlink, for the system, editing various entries:

	a.  Run module avail mpi, and find a suitable MPI to use., or install one
	    Edit the entry for openmpi to refer to it.  It is importants to set this
	    parameter, since the batch systems are aware of MPI and know how to use it.

	b.  Find a suitable cmake on the system or in a module, or install one
	    Edit the entry for cmake to refer to it

	c.  Find a suitable perl on the system or in a module, or install one
	    Edit the entry for perl to refer to it

	d.  Find a suitable python on the system or in a module, or install one
	    Edit the entry for python to refer to it

	e.  If you are installing on x86, set the architecture to use, following the "packages" line:
		packages:
		  all:
		    target: ['x86_64']
	    Make sure that each line is indented exactly two spaces relative to the one above.

8.  Decide the specific version and options you want to build.
	hpctoolkit@<version> <options> <compiler>
          <version>
              @2019.08 -- for the 2019.08 release
              @develop -- for current bits
              @gpu -- for GPU versions
          <options>
              +mpi
              +cuda
              +papi
              +all-static
		Multiple options can be concatenated
	  <compiler>
	      %gcc@<version> -- needed if the default is not good enough

	You can see what will get built with:
		spack spec hpctoolkit@<version> <options> <compiler>

9.  Do the real install
	<cmd-to-run> spack install hpctoolkit@<version> <options>

    At LLNL:
	On rzansel and lassen, <cmd-to-run> = "lalloc 1"
	On rzmanta and ray, <cmd-to-run> = "lalloc 1"
	On rzhasgpu and quartz, <cmd-to-run> = "salloc -N 1 -ppdebug"

    At LANL:
	On kodiak, <cmd-to-run> = "salloc -N 1 --qos=interactive"

    At Sandia:
	<cmd-to-run> = "salloc -N1"

    At ANL:

    At NERSC:


10.  Install the hpcviewers, where appropriate
	spack install hpcviewer@<version> <option>
          <version>
              @2019.08 -- for the 2019.08 release

    On x86 <option> is not needed
    On IBM Power machines:
	<option> ="^ibm-java"

11.  Construct a human-readable module to be used by others
	These files can live in a directory,
	    <path-to-modulefiles-directory>/{hpctoolkit,hpcviewer}/
		that is accessible to others.
	The users would run:
	    module use <path-to-modulefiles-directory>
	    module avail hpc
		to see what versions are available

	To construct lmod modules,
	    cd <INSTALL>/modules/lmod
	    find . -name hpctoolkit
		It will be a directory; cd to it
		It will have a *.lua file corresponding to each of the hpctoolkit
		    installs that your ran.
	    cp <version>.lua <path-to-modulefiles-directory>/hpctoolkit/<version>.lua

	The <path-to-modulefiles-directory> may also have a file named "default", which
	    should be a symlink to the version that is the default.
	It also may have a file named "rolling-release", which should be a symlink to
	    the latest version installed.

	Update those two links, as appropriate.

	Follow the same instructions for hpcviewer.


12.  Verify the installation:
	module use <path-to-modulefiles-directory>
	module avail hpc
	For each hpctoolkit <version>:
	    module load <version>
	    hpcrun --version
	Make sure they correspond to the installation as expected
